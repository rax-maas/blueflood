#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def GetRollupByPoints(self, metricName, ffrom, to, points):
    """
    Parameters:
     - metricName
     - ffrom
     - to
     - points
    """
    pass

  def GetRollupByResolution(self, metricName, ffrom, to, resolution):
    """
    Parameters:
     - metricName
     - ffrom
     - to
     - resolution
    """
    pass

  def GetMetricsForCheck(self, acctId, entityId, checkId):
    """
    Parameters:
     - acctId
     - entityId
     - checkId
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def GetRollupByPoints(self, metricName, ffrom, to, points):
    """
    Parameters:
     - metricName
     - ffrom
     - to
     - points
    """
    self.send_GetRollupByPoints(metricName, ffrom, to, points)
    return self.recv_GetRollupByPoints()

  def send_GetRollupByPoints(self, metricName, ffrom, to, points):
    self._oprot.writeMessageBegin('GetRollupByPoints', TMessageType.CALL, self._seqid)
    args = GetRollupByPoints_args()
    args.metricName = metricName
    args.ffrom = ffrom
    args.to = to
    args.points = points
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetRollupByPoints(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetRollupByPoints_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetRollupByPoints failed: unknown result");

  def GetRollupByResolution(self, metricName, ffrom, to, resolution):
    """
    Parameters:
     - metricName
     - ffrom
     - to
     - resolution
    """
    self.send_GetRollupByResolution(metricName, ffrom, to, resolution)
    return self.recv_GetRollupByResolution()

  def send_GetRollupByResolution(self, metricName, ffrom, to, resolution):
    self._oprot.writeMessageBegin('GetRollupByResolution', TMessageType.CALL, self._seqid)
    args = GetRollupByResolution_args()
    args.metricName = metricName
    args.ffrom = ffrom
    args.to = to
    args.resolution = resolution
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetRollupByResolution(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetRollupByResolution_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetRollupByResolution failed: unknown result");

  def GetMetricsForCheck(self, acctId, entityId, checkId):
    """
    Parameters:
     - acctId
     - entityId
     - checkId
    """
    self.send_GetMetricsForCheck(acctId, entityId, checkId)
    return self.recv_GetMetricsForCheck()

  def send_GetMetricsForCheck(self, acctId, entityId, checkId):
    self._oprot.writeMessageBegin('GetMetricsForCheck', TMessageType.CALL, self._seqid)
    args = GetMetricsForCheck_args()
    args.acctId = acctId
    args.entityId = entityId
    args.checkId = checkId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetMetricsForCheck(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = GetMetricsForCheck_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetMetricsForCheck failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["GetRollupByPoints"] = Processor.process_GetRollupByPoints
    self._processMap["GetRollupByResolution"] = Processor.process_GetRollupByResolution
    self._processMap["GetMetricsForCheck"] = Processor.process_GetMetricsForCheck

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_GetRollupByPoints(self, seqid, iprot, oprot):
    args = GetRollupByPoints_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetRollupByPoints_result()
    result.success = self._handler.GetRollupByPoints(args.metricName, args.ffrom, args.to, args.points)
    oprot.writeMessageBegin("GetRollupByPoints", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetRollupByResolution(self, seqid, iprot, oprot):
    args = GetRollupByResolution_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetRollupByResolution_result()
    result.success = self._handler.GetRollupByResolution(args.metricName, args.ffrom, args.to, args.resolution)
    oprot.writeMessageBegin("GetRollupByResolution", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetMetricsForCheck(self, seqid, iprot, oprot):
    args = GetMetricsForCheck_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetMetricsForCheck_result()
    result.success = self._handler.GetMetricsForCheck(args.acctId, args.entityId, args.checkId)
    oprot.writeMessageBegin("GetMetricsForCheck", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class GetRollupByPoints_args:
  """
  Attributes:
   - metricName
   - ffrom
   - to
   - points
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'metricName', None, None, ), # 1
    (2, TType.I64, 'ffrom', None, None, ), # 2
    (3, TType.I64, 'to', None, None, ), # 3
    (4, TType.I32, 'points', None, None, ), # 4
  )

  def __init__(self, metricName=None, ffrom=None, to=None, points=None,):
    self.metricName = metricName
    self.ffrom = ffrom
    self.to = to
    self.points = points

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.metricName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ffrom = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.to = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.points = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRollupByPoints_args')
    if self.metricName is not None:
      oprot.writeFieldBegin('metricName', TType.STRING, 1)
      oprot.writeString(self.metricName)
      oprot.writeFieldEnd()
    if self.ffrom is not None:
      oprot.writeFieldBegin('ffrom', TType.I64, 2)
      oprot.writeI64(self.ffrom)
      oprot.writeFieldEnd()
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.I64, 3)
      oprot.writeI64(self.to)
      oprot.writeFieldEnd()
    if self.points is not None:
      oprot.writeFieldBegin('points', TType.I32, 4)
      oprot.writeI32(self.points)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetRollupByPoints_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RollupMetrics, RollupMetrics.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RollupMetrics()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRollupByPoints_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetRollupByResolution_args:
  """
  Attributes:
   - metricName
   - ffrom
   - to
   - resolution
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'metricName', None, None, ), # 1
    (2, TType.I64, 'ffrom', None, None, ), # 2
    (3, TType.I64, 'to', None, None, ), # 3
    (4, TType.I32, 'resolution', None, None, ), # 4
  )

  def __init__(self, metricName=None, ffrom=None, to=None, resolution=None,):
    self.metricName = metricName
    self.ffrom = ffrom
    self.to = to
    self.resolution = resolution

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.metricName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ffrom = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.to = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.resolution = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRollupByResolution_args')
    if self.metricName is not None:
      oprot.writeFieldBegin('metricName', TType.STRING, 1)
      oprot.writeString(self.metricName)
      oprot.writeFieldEnd()
    if self.ffrom is not None:
      oprot.writeFieldBegin('ffrom', TType.I64, 2)
      oprot.writeI64(self.ffrom)
      oprot.writeFieldEnd()
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.I64, 3)
      oprot.writeI64(self.to)
      oprot.writeFieldEnd()
    if self.resolution is not None:
      oprot.writeFieldBegin('resolution', TType.I32, 4)
      oprot.writeI32(self.resolution)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetRollupByResolution_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RollupMetrics, RollupMetrics.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RollupMetrics()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetRollupByResolution_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetricsForCheck_args:
  """
  Attributes:
   - acctId
   - entityId
   - checkId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'acctId', None, None, ), # 1
    (2, TType.STRING, 'entityId', None, None, ), # 2
    (3, TType.STRING, 'checkId', None, None, ), # 3
  )

  def __init__(self, acctId=None, entityId=None, checkId=None,):
    self.acctId = acctId
    self.entityId = entityId
    self.checkId = checkId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.acctId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.entityId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.checkId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetMetricsForCheck_args')
    if self.acctId is not None:
      oprot.writeFieldBegin('acctId', TType.STRING, 1)
      oprot.writeString(self.acctId)
      oprot.writeFieldEnd()
    if self.entityId is not None:
      oprot.writeFieldBegin('entityId', TType.STRING, 2)
      oprot.writeString(self.entityId)
      oprot.writeFieldEnd()
    if self.checkId is not None:
      oprot.writeFieldBegin('checkId', TType.STRING, 3)
      oprot.writeString(self.checkId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetMetricsForCheck_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(MetricInfo, MetricInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype107, _size104) = iprot.readListBegin()
          for _i108 in xrange(_size104):
            _elem109 = MetricInfo()
            _elem109.read(iprot)
            self.success.append(_elem109)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetMetricsForCheck_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter110 in self.success:
        iter110.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
